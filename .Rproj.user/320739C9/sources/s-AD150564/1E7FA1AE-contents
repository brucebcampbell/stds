
GSAverif02 <- function(X){
  # f <- GSAverif02(X)
  #=========================================================================
  #
  # Description:
  #
  #   This function will solve example function 1: 
  #             f(x1,x2) = x1*x2
  #
  #   The programming of this function follows that of the source code for 
  #   ishigama.fun in the testmodels.R of the sensitivity package.
  #
  # Inputs:
  #
  #   X = data.frame(x1, x2)  where x1 and x2 are uniform between 0 and 1,
  #         for example a 100 samples are generated by:
  #           x1 = runif(n=100, min=0, max=1)
  #           x2 = runif(n=100, min=0, max=1)
  #
  # Outputs:
  #
  #   f = a vector of f(x1,x2) = x1*x2
  #
  #  History:
  #
  #    Author Version   Date   Note
  #    ------ ------- -------- ---------------------------------------------
  #    RJC      0.1   02/19/18 Initial release of the function
  #
  #=========================================================================
  
  #  f(x1,x2) = x1*x2
  
  X[,1]*X[,2]
  
}


# Load the sensitivity package

library(sensitivity)  # https://cran.r-project.org/package=sensitivity

#library(randtoolbox)

#  Load the verification function


#=========================================================================

nsamples = 1000   # set the sample size
nboot    = 100    # set the number of bootstrap replicates

popWindow = FALSE # set to TRUE if you want a new window for each plot
# set to FALSE if you want all the plots to appear in 
# the Plots pane of RStudio

LHS = FALSE  # use a LHS sampling from the DiceDesign package

#=========================================================================
#  Generate the samples for use with the methods
#=========================================================================

if(LHS){
  
  #  LHS sampling - three different seeded samples
  
  library(DiceDesign)  # https://cran.r-project.org/package=DiceDesign
  LHS1 <- lhsDesign(n=nsamples, dimension=2, randomized=FALSE, seed=38194)
  x1 <- LHS1$design[,1]
  x2 <- LHS1$design[,2]
  X1 <- data.frame(x1,x2)
  LHS2 <- lhsDesign(n=nsamples, dimension=2, randomized=FALSE, seed=42981)
  x1 <- LHS2$design[,1]
  x2 <- LHS2$design[,2]
  X2 <- data.frame(x1,x2)
  LHS3 <- lhsDesign(n=nsamples, dimension=2, randomized=FALSE, seed=94309)
  x1 <- LHS3$design[,1]
  x2 <- LHS3$design[,2]
  X3 <- data.frame(x1,x2)
  
} else {
  
  #  Uniform sampling
  
  x1 = runif(n=nsamples, min=0, max=1)
  x2 = runif(n=nsamples, min=0, max=1)
  X1 = data.frame(x1, x2)
  x1 = runif(n=nsamples, min=0, max=1)
  x2 = runif(n=nsamples, min=0, max=1)
  X2 = data.frame(x1, x2)
  x1 = runif(n=nsamples, min=0, max=1)
  x2 = runif(n=nsamples, min=0, max=1)
  X3 = data.frame(x1, x2)
  
}

#  Scatter plots of the three samples

f1 <- GSAverif02(X1)
f2 <- GSAverif02(X2)
f3 <- GSAverif02(X3)

par(mfrow=c(3,2))
plot(X1[,1],f1)
plot(X1[,2],f1)
plot(X2[,1],f2)
plot(X2[,2],f2)
plot(X3[,1],f3)
plot(X3[,2],f3)
par(mfrow=c(1,1))

library(rgl)
open3d()
plot3d(X1[,1], X1[,2], f1)
open3d()
plot3d(X2[,1], X2[,2], f2)
open3d()
plot3d(X3[,1], X3[,2], f3)

# library(scatterplot3d)
# scatterplot3d(X1[,1], X1[,2], f1)
# scatterplot3d(X2[,1], X2[,2], f2)
# scatterplot3d(X3[,1], X3[,2], f3)

# readline(prompt="PAUSED: Press [enter] to continue")

#X.sobol <- parameterSets(par.ranges=list(x1=c(0,1), x2=c(0,1)),
#                         samples=nsamples, method="sobol")

#=========================================================================
#  sobol method
#=========================================================================

x <- sobol(model = GSAverif02, X1, X2, order = 2, nboot = nboot)
S.sobol <- x$S




x <- sobol(model = y.fun, X11, X22, order = 2, nboot = nboot)
S.sobol <- x$S















x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new[1,], se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
